{"version":3,"sources":["components/Questions.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","window","location","origin","startsWith","ClickableLi","styled","li","Question","question","answer","idx","selectQuestion","onClick","key","Questions","endTerm","allowAnswer","useState","questions","setQuestions","console","log","won","setWon","id","setId","useEffect","fetch","method","headers","body","JSON","stringify","query","then","res","json","complete","map","evt","encodeURIComponent","click","App","setQuery","setEndTerm","setAllowAnswer","className","value","onChange","target","type","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+dAMA,IAAMA,EAAUC,OAAOC,SAASC,OAAOC,WAAW,oBAAoB,wBAAwB,0CAExFC,EAAcC,IAAOC,GAAV,KASjB,SAASC,EAAT,GAKI,IAJAC,EAID,EAJCA,SACAC,EAGD,EAHCA,OACAC,EAED,EAFCA,IACAC,EACD,EADCA,eAEA,OAAQ,kBAACP,EAAD,CAAaQ,QAASD,EAAgBE,IAAKH,GAAK,4BAAKF,GAAc,2BAAIC,IAGpE,SAASK,EAAT,GAIX,IAHAN,EAGD,EAHCA,SACAO,EAED,EAFCA,QACAC,EACD,EADCA,YACD,EACmCC,mBAAS,IAD5C,mBACQC,EADR,KACmBC,EADnB,KAECC,QAAQC,IAAIH,GAFb,MAGuBD,oBAAS,GAHhC,mBAGQK,EAHR,KAGaC,EAHb,OAIqBN,mBAAS,MAJ9B,mBAIQO,EAJR,KAIYC,EAJZ,KAmCC,OAvBAC,qBAAU,WACNN,QAAQC,IAAI,YACZM,MAAM,GAAD,OAAI5B,EAAJ,cAAyB,CAC1B6B,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,MAAOzB,EACPO,UACAC,kBAELkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,MAAK,YAIxB,IAHHV,EAGE,EAHFA,GACAN,EAEE,EAFFA,UACAmB,EACE,EADFA,SAEAd,EAAOc,GACPlB,EAAaD,GACbO,EAAMD,WAEZ,CAAChB,EAASO,EAAQC,IAGhB,6BACIM,EACK,wCACD,KAER,4BAAKF,QAAQC,IAAI,OAAOH,IACpBA,EAAUoB,KAAI,WAAmB5B,GAAnB,IAAEF,EAAF,EAAEA,SAASC,EAAX,EAAWA,OAAX,OACT,kBAACF,EAAD,CAAUI,eAAgB,SAAA4B,GAAG,OAtC5B,SAAA7B,GAAG,OAAIiB,MAAM,GAAD,OAAI5B,EAAJ,qBAAwByC,mBAAmBhB,GAA3C,gBAAsDgB,mBAAmB9B,KAAQwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,YAGjI,IAFHhB,EAEE,EAFFA,UACAmB,EACE,EADFA,SAEAlB,EAAaD,GACbK,EAAOc,MAiCiCI,CAAM/B,IAAMF,SAAUA,EAAUC,OAAQA,EAAQC,IAAKA,SCjDtFgC,MAjBf,WAAgB,IAAD,EACezB,mBAAS,uBADxB,mBACJgB,EADI,KACGU,EADH,OAEmB1B,mBAAS,QAF5B,mBAEJF,EAFI,KAEK6B,EAFL,OAG2B3B,oBAAS,GAHpC,mBAGJD,EAHI,KAGS6B,EAHT,KAKX,OADAnB,qBAAU,WAAKN,QAAQC,IAAIY,EAAMlB,EAAQC,MAErC,yBAAK8B,UAAU,OACjB,2BAAOC,MAAOd,EAAOe,SAAU,SAACT,GAAD,OAAOI,EAASJ,EAAIU,OAAOF,UAC1D,6BACA,2BAAOA,MAAOhC,EAASiC,SAAU,SAACT,GAAD,OAAOK,EAAWL,EAAIU,OAAOF,UAC9D,6BACA,2BAAOG,KAAK,SAASH,MAAO/B,EAAaJ,QAAS,kBAAIiC,GAAgB7B,MACtE,kBAACF,EAAD,CAAWN,SAAUyB,EAAOlB,QAASA,EAASC,YAAaA,MCP7CmC,QACW,cAA7BnD,OAAOC,SAASmD,UAEe,UAA7BpD,OAAOC,SAASmD,UAEhBpD,OAAOC,SAASmD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.b2ea0ef3.chunk.js","sourcesContent":["import React, {\n    useState,\n    useEffect,\n} from 'react';\nimport styled from 'styled-components';\n\nconst API_URL = window.location.origin.startsWith('http://localhost')?'http://localhost:4000':'https://people-also-asked.herokuapp.com';\n\nconst ClickableLi = styled.li `\n    :hover {\n        background:#DDDDDD;\n        border:2px solid;\n    }\n    border:1px solid;\n    background:#FFFFFF;\n`;\n\nfunction Question({\n    question,\n    answer,\n    idx,\n    selectQuestion,\n}) {\n    return (<ClickableLi onClick={selectQuestion} key={idx}><h2>{question}</h2><p>{answer}</p></ClickableLi>);\n}\n\nexport default function Questions({\n    question,\n    endTerm,\n    allowAnswer\n}) {\n    const [questions, setQuestions] = useState([]);\n    console.log(questions);\n    const [won, setWon] = useState(false);\n    const [id, setId] = useState(null);\n    const click = idx => fetch(`${API_URL}/click?id=${encodeURIComponent(id)}&idx=${encodeURIComponent(idx)}`).then(res => res.json()).then(({\n        questions,\n        complete,\n    }) => {\n        setQuestions(questions);\n        setWon(complete);\n    });\n    useEffect(() => {\n        console.log(\"Running!\");\n        fetch(`${API_URL}/challenge`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                query: question,\n                endTerm,\n                allowAnswer\n            })\n        }).then(res => res.json().then(({\n            id,\n            questions,\n            complete\n        }) => {\n            setWon(complete);\n            setQuestions(questions);\n            setId(id);\n        }));\n    },[question,endTerm,allowAnswer]);\n\n    return (\n        <div>{\n            won?\n                (<h1>You won!</h1>):\n                null\n        }\n        <ul>{console.log(\"ques\",questions)||\n            questions.map(({question,answer},idx) =>\n                (<Question selectQuestion={evt=>click(idx)} question={question} answer={answer} idx={idx}/>))\n        }</ul>\n    </div>);\n};\n","import React, {\n    useState,\n    useEffect\n} from 'react';\nimport './App.css';\nimport Questions from './components/Questions.js';\n\nfunction App() {\n    const [query, setQuery] = useState(\"Irish potato famine\");\n    const [endTerm, setEndTerm] = useState(\"fish\");\n    const [allowAnswer, setAllowAnswer] = useState(false);\n    useEffect(()=>{console.log(query,endTerm,allowAnswer);});\n    return (\n        <div className=\"App\">\n      <input value={query} onChange={(evt)=>setQuery(evt.target.value)}/>\n      <br/>\n      <input value={endTerm} onChange={(evt)=>setEndTerm(evt.target.value)}/>\n      <br/>\n      <input type=\"button\" value={allowAnswer} onClick={()=>setAllowAnswer(!allowAnswer)}/>\n      <Questions question={query} endTerm={endTerm} allowAnswer={allowAnswer}/>\n    </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}